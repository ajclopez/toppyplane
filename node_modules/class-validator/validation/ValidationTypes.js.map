{"version":3,"sources":["../../src/validation/ValidationTypes.ts"],"names":[],"mappings":"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","file":"ValidationTypes.js","sourcesContent":["import {ValidationArguments} from \"./ValidationArguments\";\n\n/**\n * Validation types.\n */\nexport class ValidationTypes {\n\n    /* system */\n    static CUSTOM_VALIDATION = \"customValidation\";\n    static NESTED_VALIDATION = \"nestedValidation\";\n    static CONDITIONAL_VALIDATION = \"conditionalValidation\";\n\n    /* common checkers */\n    static IS_DEFINED = \"isDefined\";\n    static EQUALS = \"equals\";\n    static NOT_EQUALS = \"notEquals\";\n    static IS_EMPTY = \"isEmpty\";\n    static IS_NOT_EMPTY = \"isNotEmpty\";\n    static IS_IN = \"isIn\";\n    static IS_NOT_IN = \"isNotIn\";\n\n    /* type checkers */\n    static IS_BOOLEAN = \"isBoolean\";\n    static IS_DATE = \"isDate\";\n    static IS_NUMBER = \"isNumber\";\n    static IS_STRING = \"isString\";\n    static IS_DATE_STRING = \"isDateString\";\n    static IS_ARRAY = \"isArray\";\n    static IS_INT = \"isInt\";\n    static IS_ENUM = \"isEnum\";\n\n    /* number checkers */\n    static IS_DIVISIBLE_BY = \"isDivisibleBy\";\n    static IS_POSITIVE = \"isPositive\";\n    static IS_NEGATIVE = \"isNegative\";\n    static MIN = \"min\";\n    static MAX = \"max\";\n\n    /* date checkers */\n    static MIN_DATE = \"minDate\";\n    static MAX_DATE = \"maxDate\";\n\n    /* string-as-type checkers */\n    static IS_BOOLEAN_STRING = \"isBooleanString\";\n    static IS_NUMBER_STRING = \"isNumberString\";\n\n    /* string checkers */\n    static CONTAINS = \"contains\";\n    static NOT_CONTAINS = \"notContains\";\n    static IS_ALPHA = \"isAlpha\";\n    static IS_ALPHANUMERIC = \"isAlphanumeric\";\n    static IS_ASCII = \"isAscii\";\n    static IS_BASE64 = \"isBase64\";\n    static IS_BYTE_LENGTH = \"isByteLength\";\n    static IS_CREDIT_CARD = \"isCreditCard\";\n    static IS_CURRENCY = \"isCurrency\";\n    static IS_EMAIL = \"isEmail\";\n    static IS_FQDN = \"isFqdn\";\n    static IS_FULL_WIDTH = \"isFullWidth\";\n    static IS_HALF_WIDTH = \"isHalfWidth\";\n    static IS_VARIABLE_WIDTH = \"isVariableWidth\";\n    static IS_HEX_COLOR = \"isHexColor\";\n    static IS_HEXADECIMAL = \"isHexadecimal\";\n    static IS_IP = \"isIp\";\n    static IS_ISBN = \"isIsbn\";\n    static IS_ISIN = \"isIsin\";\n    static IS_ISO8601 = \"isIso8601\";\n    static IS_JSON = \"isJson\";\n    static IS_LOWERCASE = \"isLowercase\";\n    static IS_MOBILE_PHONE = \"isMobilePhone\";\n    static IS_MONGO_ID = \"isMongoId\";\n    static IS_MULTIBYTE = \"isMultibyte\";\n    static IS_SURROGATE_PAIR = \"isSurrogatePair\";\n    static IS_URL = \"isUrl\";\n    static IS_UUID = \"isUuid\";\n    static LENGTH = \"length\";\n    static IS_UPPERCASE = \"isUppercase\";\n    static MIN_LENGTH = \"minLength\";\n    static MAX_LENGTH = \"maxLength\";\n    static MATCHES = \"matches\";\n    static IS_MILITARY_TIME = \"isMilitaryTime\";\n\n    /* array checkers */\n    static ARRAY_CONTAINS = \"arrayContains\";\n    static ARRAY_NOT_CONTAINS = \"arrayNotContains\";\n    static ARRAY_NOT_EMPTY = \"arrayNotEmpty\";\n    static ARRAY_MIN_SIZE = \"arrayMinSize\";\n    static ARRAY_MAX_SIZE = \"arrayMaxSize\";\n    static ARRAY_UNIQUE = \"arrayUnique\";\n\n    /**\n     * Checks if validation type is valid.\n     */\n    static isValid(type: string) {\n        return  type !== \"isValid\" &&\n            type !== \"getMessage\" &&\n            Object.keys(this).map(key => (this as any)[key]).indexOf(type) !== -1;\n    }\n\n    /**\n     * Gets default validation error message for the given validation type.\n     */\n    static getMessage(type: string, isEach: boolean): string|((args: ValidationArguments) => string) {\n        const eachPrefix = isEach ? \"each value in \" : \"\";\n        switch (type) {\n\n            /* common checkers */\n            case this.IS_DEFINED:\n                return eachPrefix + \"$property should not be null or undefined\";\n            case this.EQUALS:\n                return eachPrefix + \"$property must be equal to $constraint1\";\n            case this.NOT_EQUALS:\n                return eachPrefix + \"$property should not be equal to $constraint1\";\n            case this.IS_EMPTY:\n                return eachPrefix + \"$property must be empty\";\n            case this.IS_NOT_EMPTY:\n                return eachPrefix + \"$property should not be empty\";\n            case this.IS_IN:\n                return eachPrefix + \"$property must be one of the following values: $constraint1\";\n            case this.IS_NOT_IN:\n                return eachPrefix + \"$property should not be one of the following values: $constraint1\";\n\n            /* type checkers */\n            case this.IS_BOOLEAN:\n                return eachPrefix + \"$property must be a boolean value\";\n            case this.IS_DATE:\n                return eachPrefix + \"$property must be a Date instance\";\n            case this.IS_NUMBER:\n                return eachPrefix + \"$property must be a number\";\n            case this.IS_INT:\n                return eachPrefix + \"$property must be an integer number\";\n            case this.IS_STRING:\n                return eachPrefix + \"$property must be a string\";\n            case this.IS_DATE_STRING:\n                return eachPrefix + \"$property must be a ISOString\";\n            case this.IS_ARRAY:\n                return eachPrefix + \"$property must be an array\";\n            case this.IS_ENUM:\n                return eachPrefix + \"$property must be a valid enum value\";\n\n            /* number checkers */\n            case this.IS_DIVISIBLE_BY:\n                return eachPrefix + \"$property must be divisible by $constraint1\";\n            case this.IS_POSITIVE:\n                return eachPrefix + \"$property must be a positive number\";\n            case this.IS_NEGATIVE:\n                return eachPrefix + \"$property must be a negative number\";\n            case this.MIN:\n                return eachPrefix + \"$property must be greater than $constraint1\";\n            case this.MAX:\n                return eachPrefix + \"$property must be less than $constraint1\";\n\n            /* date checkers */\n            case this.MIN_DATE:\n                return \"minimal allowed date for \" + eachPrefix + \"$property is $constraint1\";\n            case this.MAX_DATE:\n                return \"maximal allowed date for \" + eachPrefix + \"$property is $constraint1\";\n\n            /* string-as-type checkers */\n            case this.IS_BOOLEAN_STRING:\n                return eachPrefix + \"$property must be a boolean string\";\n            case this.IS_NUMBER_STRING:\n                return eachPrefix + \"$property must be a number string\";\n\n            /* string checkers */\n            case this.CONTAINS:\n                return eachPrefix + \"$property must contain a $constraint1 string\";\n            case this.NOT_CONTAINS:\n                return eachPrefix + \"$property should not contain a $constraint1 string\";\n            case this.IS_ALPHA:\n                return eachPrefix + \"$property must contain only letters (a-zA-Z)\";\n            case this.IS_ALPHANUMERIC:\n                return eachPrefix + \"$property must contain only letters and numbers\";\n            case this.IS_ASCII:\n                return eachPrefix + \"$property must contain only ASCII characters\";\n            case this.IS_BASE64:\n                return eachPrefix + \"$property must be base64 encoded\";\n            case this.IS_BYTE_LENGTH:\n                return eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\";\n            case this.IS_CREDIT_CARD:\n                return eachPrefix + \"$property must be a credit card\";\n            case this.IS_CURRENCY:\n                return eachPrefix + \"$property must be a currency\";\n            case this.IS_EMAIL:\n                return eachPrefix + \"$property must be an email\";\n            case this.IS_FQDN:\n                return eachPrefix + \"$property must be a valid domain name\";\n            case this.IS_FULL_WIDTH:\n                return eachPrefix + \"$property must contain a full-width characters\";\n            case this.IS_HALF_WIDTH:\n                return eachPrefix + \"$property must contain a half-width characters\";\n            case this.IS_VARIABLE_WIDTH:\n                return eachPrefix + \"$property must contain a full-width and half-width characters\";\n            case this.IS_HEX_COLOR:\n                return eachPrefix + \"$property must be a hexadecimal color\";\n            case this.IS_HEXADECIMAL:\n                return eachPrefix + \"$property must be a hexadecimal number\";\n            case this.IS_IP:\n                return eachPrefix + \"$property must be an ip address\";\n            case this.IS_ISBN:\n                return eachPrefix + \"$property must be an ISBN\";\n            case this.IS_ISIN:\n                return eachPrefix + \"$property must be an ISIN (stock/security identifier)\";\n            case this.IS_ISO8601:\n                return eachPrefix + \"$property must be a valid ISO 8601 date string\";\n            case this.IS_JSON:\n                return eachPrefix + \"$property must be a json string\";\n            case this.IS_LOWERCASE:\n                return eachPrefix + \"$property must be a lowercase string\";\n            case this.IS_MOBILE_PHONE:\n                return eachPrefix + \"$property must be a phone number\";\n            case this.IS_MONGO_ID:\n                return eachPrefix + \"$property must be a mongodb id\";\n            case this.IS_MULTIBYTE:\n                return eachPrefix + \"$property must contain one or more multibyte chars\";\n            case this.IS_SURROGATE_PAIR:\n                return eachPrefix + \"$property must contain any surrogate pairs chars\";\n            case this.IS_URL:\n                return eachPrefix + \"$property must be an URL address\";\n            case this.IS_UUID:\n                return eachPrefix + \"$property must be an UUID\";\n            case this.IS_UPPERCASE:\n                return eachPrefix + \"$property must be uppercase\";\n            case this.LENGTH:\n                return (args: ValidationArguments) => {\n                    const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\n                    const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\n                    if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\n                        return eachPrefix + \"$property must be longer than $constraint1 characters\";\n                    } else if (isMaxLength && (args.value.length > args.constraints[1])) {\n                        return eachPrefix + \"$property must be shorter than $constraint2 characters\";\n                    }\n                    return eachPrefix + \"$property must be longer than $constraint1 and shorter than $constraint2 characters\";\n                };\n            case this.MIN_LENGTH:\n                return eachPrefix + \"$property must be longer than or equal to $constraint1 characters\";\n            case this.MAX_LENGTH:\n                return eachPrefix + \"$property must be shorter than or equal to $constraint1 characters\";\n            case this.MATCHES:\n                return eachPrefix + \"$property must match $constraint1 regular expression\";\n\n            /* array checkers */\n            case this.ARRAY_CONTAINS:\n                return eachPrefix + \"$property must contain $constraint1 values\";\n            case this.ARRAY_NOT_CONTAINS:\n                return eachPrefix + \"$property should not contain $constraint1 values\";\n            case this.ARRAY_NOT_EMPTY:\n                return eachPrefix + \"$property should not be empty\";\n            case this.ARRAY_MIN_SIZE:\n                return eachPrefix + \"$property must contain at least $constraint1 elements\";\n            case this.ARRAY_MAX_SIZE:\n                return eachPrefix + \"$property must contain not more than $constraint1 elements\";\n            case this.ARRAY_UNIQUE:\n                return eachPrefix + \"All $property's elements must be unique\";\n        }\n\n        return \"\";\n    }\n\n}\n"],"sourceRoot":".."}